{WorkspaceView} = require 'atom'
SyncSettings = require '../lib/sync-settings'

# Use the command `window:run-package-specs` (cmd-alt-ctrl-p) to run specs.
#
# To run a specific `it` or `describe` block add an `f` to the front (e.g. `fit`
# or `fdescribe`). Remove the `f` to unfocus the block.

describe "SyncSettings", ->

  TOKEN_CONFIG = 'sync-settings.personalAccessToken'
  GIST_ID_CONFIG = 'sync-settings.gistId'
  originalToken = null
  originalGistId = null
  token = null
  gistId = null
  activationPromise = null

  beforeEach ->
    @token = process.env.GITHUB_TOKEN || 'f9c752db47eba1e4ca4b3573c831529f26b771ee'

    c = atom.config # shorthand to atom.config
    @originalToken = c.get TOKEN_CONFIG unless c.isDefault TOKEN_CONFIG
    c.set(TOKEN_CONFIG, @token)
    console.debug "sync-settings = ", atom.config.settings['sync-settings']

    [@err, @res] = [null, null]
    called = false
    runs =>
      console.debug "Creating test gist..."
      SyncSettings.createClient().gists.create
        public: false
        description: "Test gist by Sync Settings for Atom https://github.com/Hackafe/atom-sync-settings"
        files:
          "README": {content: '# Generated by Sync Settings for Atom https://github.com/Hackafe/atom-sync-settings'}
      , (@err, @res) =>
        console.debug "Created test gist"
        called = true

    waitsFor => called

    runs =>
      expect(@err).toBeNull()
      expect(@res).not.toBeNull()
      expect(@res.id).toBeDefined()
      expect(@res.id).toBeTruthy()

      @gistId = @res.id

      c = atom.config
      @originalGistId = c.get GIST_ID_CONFIG unless c.isDefault GIST_ID_CONFIG
      c.set(GIST_ID_CONFIG, @gistId)

      console.debug "sync-settings(before workspace) = ", atom.config.settings['sync-settings']
      atom.workspaceView = new WorkspaceView
      @activationPromise = atom.packages.activatePackage('sync-settings')
      console.debug "sync-settings(after activation) = ", atom.config.settings['sync-settings']


  afterEach ->
    SyncSettings.createClient().gists.delete {id: @gistId}

    if originalGistId
      atom.config.set(GIST_ID_CONFIG, @originalGistId)
    else
      atom.config.restoreDefault GIST_ID_CONFIG
    if originalToken
      atom.config.set(TOKEN_CONFIG, @originalToken)
    else
      atom.config.restoreDefault TOKEN_CONFIG


  describe "when the sync-settings:upload event is triggered", ->
    it "uploads the settings", ->

      console.debug "sync-settings(doing) = ", atom.config.settings['sync-settings']

      waitsForPromise =>
        @activationPromise

      runs =>
        console.debug "sync-settings(active) = ", atom.config.settings['sync-settings']
        expect(atom.workspaceView.events()['sync-settings:upload']).toBeDefined()

        console.debug "Triggering upload"

        uploaded = false
        SyncSettings.upload =>
          uploaded = true

        waitsFor => uploaded

        runs =>
          fetched = false
          SyncSettings.createClient().gists.get {id: @gistId}, (@err, @res) =>
            fetched = true

          waitsFor => fetched

          runs =>
            expect(@err).toBeNull()
            expect(@res).not.toBeNull()
            expect(@res.files['settings.json']).toBeDefined()
            expect(@res.files['packages.json']).toBeDefined()
